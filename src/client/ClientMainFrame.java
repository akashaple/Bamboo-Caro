package client;

import java.awt.AWTException;
import java.awt.BorderLayout;
import java.awt.HeadlessException;
import java.awt.MenuItem;
import java.awt.PopupMenu;
import java.awt.SystemTray;
import java.awt.Toolkit;
import java.awt.TrayIcon;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.net.UnknownHostException;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import models.Account;


/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainFrame.java
 *
 * Created on Feb 24, 2012, 7:52:48 PM
 */
/**
 *
 * @author Administrator
 */
public class ClientMainFrame extends javax.swing.JFrame {

    private DashBoardPanel dashBoardPanel;
    private LoginPanel loginPanel;
    private RegisterPanel registerPanel;
    
    private TrayIcon trayIcon;

    /** Creates new form MainFrame */
    public ClientMainFrame() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.initTrayIcon();        
        connectToServer();

        loginPanel = new LoginPanel(this);
        registerPanel = new RegisterPanel(this);

        openLoginPanel();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Bamboo Caro");
        setBackground(new java.awt.Color(255, 255, 255));
        setIconImage(Toolkit.getDefaultToolkit().getImage("src/images/icon.png"));
        setMinimumSize(new java.awt.Dimension(707, 695));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        addWindowStateListener(new java.awt.event.WindowStateListener() {
            public void windowStateChanged(java.awt.event.WindowEvent evt) {
                formWindowStateChanged(evt);
            }
        });

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        shutdown();
    }//GEN-LAST:event_formWindowClosing

private void formWindowStateChanged(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowStateChanged
    if(this.getState() == 1){
        this.minimize();        
    }
}//GEN-LAST:event_formWindowStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new ClientMainFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    public void openLoginPanel() {
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                getContentPane().removeAll();
                getContentPane().add(loginPanel, BorderLayout.CENTER);
                getContentPane().revalidate();
                getContentPane().repaint();
//                ClientMainFrame.this.revalidate();
            }
        });

    }

    public void openRegisterPanel() {
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                getContentPane().removeAll();
                getContentPane().add(registerPanel, BorderLayout.CENTER);
                getContentPane().revalidate();
                getContentPane().repaint();
//                ClientMainFrame.this.revalidate();
            }
        });

    }

    public void openDashBoardPanel(final Account account) {
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                getContentPane().removeAll();
                dashBoardPanel = new DashBoardPanel(ClientMainFrame.this, account);
//                dashBoardPanel.setAccount(account);
                getContentPane().add(dashBoardPanel, BorderLayout.CENTER);
                getContentPane().revalidate();
                getContentPane().repaint();
//                ClientMainFrame.this.revalidate();
            }
        });

    }

    public void shutdown() {
        if(dashBoardPanel != null)
            dashBoardPanel.shutdownRequest();        
    }

    private void connectToServer() {
        if (client == null) {
            try {
                client = new Client().contactServer(HOST, PORT);
                client.connectObjOutputStream();
                client.connectObjInputStream();
                client.connectDataOutputStream();
                client.connectDataInputStream();
            } catch (UnknownHostException ex) {
//                Logger.getLogger(ClientMainFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Can't connect to server! "
                        + "Program shutdowns now!", "Error Ocurred!", JOptionPane.ERROR_MESSAGE);
                this.shutdown();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Can't connect to server! "
                        + "Program shutdowns now!", "Error Ocurred!", JOptionPane.ERROR_MESSAGE);
//                Logger.getLogger(ClientMainFrame.class.getName()).log(Level.SEVERE, null, ex);
                this.shutdown();
            }
        }
    }
    
    private void initTrayIcon() {
        trayIcon = new TrayIcon(Toolkit.getDefaultToolkit().getImage("src/images/icon.png"),
                "Bamboo Caro", createPopupMenu());

        trayIcon.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                SystemTray.getSystemTray().remove(trayIcon);
                ClientMainFrame.this.setVisible(true);
                ClientMainFrame.this.setExtendedState(ClientMainFrame.this.NORMAL);
//                ClientMainFrame.this.setAlwaysOnTop(true);
                ClientMainFrame.this.requestFocus();
//                ClientMainFrame.this.setAlwaysOnTop(false);

//                ClientMainFrame.this.toFront();
//                ClientMainFrame.this.repaint();
            }
        });
    }
    
    
    private static PopupMenu createPopupMenu() throws HeadlessException {
        PopupMenu menu = new PopupMenu();
        MenuItem exit = new MenuItem("Exit");
        exit.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                System.exit(0);
            }
        });

        menu.add(exit);

        return menu;

    }

    private void minimize() {
        try {
            SystemTray.getSystemTray().add(trayIcon);
        } catch (AWTException ex) {
            ex.printStackTrace();
        }
        this.setVisible(false);
    }

    public Client getClient() {
        return client;
    }
    private Client client;
    public static final String HOST = "localhost";
    public static final int PORT = 6000;
}
