/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DashBoardPanel.java
 *
 * Created on Feb 24, 2012, 9:17:47 PM
 */
package client;

import java.awt.BorderLayout;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.text.*;
import javax.swing.text.html.HTMLEditorKit;
import javax.swing.text.html.HTMLEditorKit.HTMLFactory;
import javax.swing.text.html.InlineView;
import models.Account;
import models.AccountItem;
import models.Cmd;
import models.GameMap;
import models.Room;
import models.UserListRenderer;

/**
 *
 * @author Administrator
 */
public class DashBoardPanel extends javax.swing.JPanel {

    private ClientMainFrame clientMainFrame;
    private InitGamePanel initGamePanel;
    private EmoticonPane emoticonPane;
    private boolean dead = false;
    private GameMap receivedMap;
    private CanvasPanel canvasPanel;
    private String selectedRoomName;
    private boolean isHost = false;

//    private List<AccountItem> accountItems = new ArrayList<>();
    /**
     * Creates new form DashBoardPanel
     */
    public DashBoardPanel(ClientMainFrame clientMainFrame, Account account) {
        initComponents();
        this.account = account;
        this.clientMainFrame = clientMainFrame;
        initGamePanel = new InitGamePanel(this);
        emoticonPane = new EmoticonPane(clientMainFrame, true, this);
        this.lstUsers.setCellRenderer(new UserListRenderer());

        this.bindEnterEventToChatInput();
        this.listenToServer();
        this.loadRooms();
        this.openInitGamePanel();
        this.setTitle(null);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pumUser = new javax.swing.JPopupMenu();
        itmInfo = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        itmKick = new javax.swing.JMenuItem();
        pnlCanvas = new javax.swing.JPanel();
        pnlMenu = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        btnOut = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        lblMsgTitle = new javax.swing.JLabel();
        pnlMisc = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtChatInput = new javax.swing.JTextPane();
        jPanel3 = new javax.swing.JPanel();
        pnlUsers = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstUsers = new javax.swing.JList();
        jPanel5 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        pnlChatArea = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtChatDialog = new javax.swing.JEditorPane();
        jPanel1 = new javax.swing.JPanel();
        btnEmotion = new javax.swing.JButton();
        btnSend = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();

        itmInfo.setText("View Info");
        itmInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itmInfoActionPerformed(evt);
            }
        });
        pumUser.add(itmInfo);
        pumUser.add(jSeparator2);

        itmKick.setText("Kick Out!");
        itmKick.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itmKickActionPerformed(evt);
            }
        });
        pumUser.add(itmKick);

        setBackground(new java.awt.Color(255, 255, 255));
        setMaximumSize(new java.awt.Dimension(702, 720));
        setMinimumSize(new java.awt.Dimension(702, 720));
        setPreferredSize(new java.awt.Dimension(665, 720));
        setLayout(new java.awt.BorderLayout());

        pnlCanvas.setBackground(new java.awt.Color(255, 255, 255));
        pnlCanvas.setMaximumSize(new java.awt.Dimension(540, 520));
        pnlCanvas.setMinimumSize(new java.awt.Dimension(540, 520));
        pnlCanvas.setPreferredSize(new java.awt.Dimension(540, 520));
        pnlCanvas.setLayout(new java.awt.BorderLayout());
        add(pnlCanvas, java.awt.BorderLayout.CENTER);

        pnlMenu.setBackground(new java.awt.Color(255, 255, 255));
        pnlMenu.setPreferredSize(new java.awt.Dimension(720, 65));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24));
        jLabel1.setForeground(new java.awt.Color(153, 0, 0));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/bamboo_0.gif"))); // NOI18N
        jLabel1.setText("Bamboo Caro");

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator1.setMinimumSize(new java.awt.Dimension(10, 10));
        jSeparator1.setPreferredSize(new java.awt.Dimension(10, 50));

        jLabel2.setPreferredSize(new java.awt.Dimension(100, 0));

        btnOut.setBackground(new java.awt.Color(255, 255, 255));
        btnOut.setFont(new java.awt.Font("Tahoma", 1, 14));
        btnOut.setForeground(new java.awt.Color(153, 0, 0));
        btnOut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/player_stop.png"))); // NOI18N
        btnOut.setText("<html>Out<br/>of<br/>Here!</html>");
        btnOut.setEnabled(false);
        btnOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOutActionPerformed(evt);
            }
        });

        btnExit.setBackground(new java.awt.Color(255, 255, 255));
        btnExit.setFont(new java.awt.Font("Tahoma", 1, 14));
        btnExit.setForeground(new java.awt.Color(153, 0, 0));
        btnExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/notification_error.png"))); // NOI18N
        btnExit.setText("<html>Exit</html>");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        lblMsgTitle.setFont(new java.awt.Font("Tahoma", 1, 16));

        javax.swing.GroupLayout pnlMenuLayout = new javax.swing.GroupLayout(pnlMenu);
        pnlMenu.setLayout(pnlMenuLayout);
        pnlMenuLayout.setHorizontalGroup(
            pnlMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMenuLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jLabel1)
                .addGap(5, 5, 5)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(pnlMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMenuLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlMenuLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblMsgTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnOut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlMenuLayout.setVerticalGroup(
            pnlMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMenuLayout.createSequentialGroup()
                .addGroup(pnlMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMenuLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jLabel1))
                    .addComponent(btnOut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlMenuLayout.createSequentialGroup()
                        .addGroup(pnlMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlMenuLayout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlMenuLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(lblMsgTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(12, 12, 12))
        );

        add(pnlMenu, java.awt.BorderLayout.PAGE_START);

        pnlMisc.setBackground(new java.awt.Color(255, 255, 255));
        pnlMisc.setPreferredSize(new java.awt.Dimension(720, 100));
        pnlMisc.setLayout(new java.awt.BorderLayout());

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setPreferredSize(new java.awt.Dimension(200, 100));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jScrollPane3.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane3.setBorder(null);

        txtChatInput.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jScrollPane3.setViewportView(txtChatInput);

        jPanel2.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        pnlMisc.add(jPanel2, java.awt.BorderLayout.LINE_END);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setPreferredSize(new java.awt.Dimension(500, 100));
        jPanel3.setLayout(new java.awt.BorderLayout());

        pnlUsers.setBackground(new java.awt.Color(255, 255, 255));
        pnlUsers.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        pnlUsers.setLayout(new java.awt.BorderLayout());

        jScrollPane2.setBorder(null);
        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        lstUsers.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstUsers.setFixedCellWidth(100);
        lstUsers.setLayoutOrientation(javax.swing.JList.HORIZONTAL_WRAP);
        lstUsers.setVisibleRowCount(-1);
        lstUsers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lstUsersMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(lstUsers);

        pnlUsers.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanel3.add(pnlUsers, java.awt.BorderLayout.CENTER);

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setPreferredSize(new java.awt.Dimension(5, 100));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 5, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 90, Short.MAX_VALUE)
        );

        jPanel3.add(jPanel5, java.awt.BorderLayout.WEST);

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setPreferredSize(new java.awt.Dimension(5, 100));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 5, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 90, Short.MAX_VALUE)
        );

        jPanel3.add(jPanel4, java.awt.BorderLayout.EAST);

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setPreferredSize(new java.awt.Dimension(465, 5));

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 502, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 5, Short.MAX_VALUE)
        );

        jPanel3.add(jPanel6, java.awt.BorderLayout.SOUTH);

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));
        jPanel7.setPreferredSize(new java.awt.Dimension(5, 5));

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 502, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 5, Short.MAX_VALUE)
        );

        jPanel3.add(jPanel7, java.awt.BorderLayout.NORTH);

        pnlMisc.add(jPanel3, java.awt.BorderLayout.CENTER);

        add(pnlMisc, java.awt.BorderLayout.PAGE_END);

        pnlChatArea.setMaximumSize(new java.awt.Dimension(200, 600));
        pnlChatArea.setMinimumSize(new java.awt.Dimension(200, 225));
        pnlChatArea.setPreferredSize(new java.awt.Dimension(200, 530));
        pnlChatArea.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setBorder(null);
        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setAutoscrolls(true);
        jScrollPane1.setMaximumSize(new java.awt.Dimension(200, 500));

        txtChatDialog.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        txtChatDialog.setContentType("text/html");
        txtChatDialog.setEditable(false);
        txtChatDialog.setEditorKit(new PreWrapHTMLEditorKit());
        txtChatDialog.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        txtChatDialog.setMaximumSize(new java.awt.Dimension(200, 500));
        txtChatDialog.setMinimumSize(new java.awt.Dimension(200, 500));
        txtChatDialog.setPreferredSize(new java.awt.Dimension(200, 500));
        jScrollPane1.setViewportView(txtChatDialog);

        pnlChatArea.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new java.awt.BorderLayout());

        btnEmotion.setBackground(new java.awt.Color(255, 255, 255));
        btnEmotion.setFont(new java.awt.Font("Tahoma", 1, 14));
        btnEmotion.setForeground(new java.awt.Color(153, 0, 0));
        btnEmotion.setText("<html>Emoticon!</html>");
        btnEmotion.setEnabled(false);
        btnEmotion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEmotionActionPerformed(evt);
            }
        });
        jPanel1.add(btnEmotion, java.awt.BorderLayout.WEST);

        btnSend.setBackground(new java.awt.Color(255, 255, 255));
        btnSend.setFont(new java.awt.Font("Tahoma", 1, 14));
        btnSend.setForeground(new java.awt.Color(153, 0, 0));
        btnSend.setText("<html>Send</html>");
        btnSend.setEnabled(false);
        btnSend.setPreferredSize(new java.awt.Dimension(100, 25));
        btnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendActionPerformed(evt);
            }
        });
        jPanel1.add(btnSend, java.awt.BorderLayout.EAST);

        pnlChatArea.add(jPanel1, java.awt.BorderLayout.SOUTH);

        add(pnlChatArea, java.awt.BorderLayout.LINE_END);

        jPanel8.setBackground(new java.awt.Color(255, 255, 255));
        jPanel8.setMaximumSize(new java.awt.Dimension(5, 32767));
        jPanel8.setMinimumSize(new java.awt.Dimension(5, 0));
        jPanel8.setPreferredSize(new java.awt.Dimension(5, 555));

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 5, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 555, Short.MAX_VALUE)
        );

        add(jPanel8, java.awt.BorderLayout.LINE_START);
    }// </editor-fold>//GEN-END:initComponents

private void btnSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendActionPerformed
    submitChatText();
}//GEN-LAST:event_btnSendActionPerformed

private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
    shutdownRequest();
}//GEN-LAST:event_btnExitActionPerformed

private void btnEmotionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEmotionActionPerformed
    Point point = this.btnEmotion.getLocationOnScreen();
    this.emoticonPane.popup(point.x, point.y - 300);
}//GEN-LAST:event_btnEmotionActionPerformed

private void lstUsersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstUsersMouseClicked
    AccountItem accountItem = (AccountItem) lstUsers.getSelectedValue();
    if (accountItem != null) {
        if (accountItem.getElement() == models.Element.NULL && isHost) {
            itmKick.setEnabled(true);
        } else {
            itmKick.setEnabled(false);
        }
        pumUser.show(lstUsers, evt.getPoint().x, evt.getPoint().y);
    }
}//GEN-LAST:event_lstUsersMouseClicked

private void itmInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itmInfoActionPerformed
    AccountItem accountItem = (AccountItem) lstUsers.getSelectedValue();
    if (accountItem != null) {
        new UserInfoDialog(null, this, true, accountItem.getAccount()).setVisible(true);
    }
}//GEN-LAST:event_itmInfoActionPerformed

private void btnOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOutActionPerformed
    if (!canvasPanel.isFinished() && canvasPanel.isPlayer()) {
        playerOutOfRoom();
    } else {
        outOfRoom();
    }
}//GEN-LAST:event_btnOutActionPerformed

    private void itmKickActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itmKickActionPerformed
        AccountItem accountItem = (AccountItem) lstUsers.getSelectedValue();
        if (accountItem != null) {
            Client client = clientMainFrame.getClient();
            try {
                client.sendInt(Cmd.KICK);
                client.sendMessage(accountItem.getAccount().getUsername());
            } catch (IOException ex) {
                Logger.getLogger(DashBoardPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
    }//GEN-LAST:event_itmKickActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEmotion;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnOut;
    private javax.swing.JButton btnSend;
    private javax.swing.JMenuItem itmInfo;
    private javax.swing.JMenuItem itmKick;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JLabel lblMsgTitle;
    private javax.swing.JList lstUsers;
    private javax.swing.JPanel pnlCanvas;
    private javax.swing.JPanel pnlChatArea;
    private javax.swing.JPanel pnlMenu;
    private javax.swing.JPanel pnlMisc;
    private javax.swing.JPanel pnlUsers;
    private javax.swing.JPopupMenu pumUser;
    private javax.swing.JEditorPane txtChatDialog;
    private javax.swing.JTextPane txtChatInput;
    // End of variables declaration//GEN-END:variables
    static final int INIT_ROOM = 1;
    static final int JOINED_ROOM = 2;
    private Account account;

    public Account getAccount() {
        return account;
    }

    public void setAccount(Account account) {
        this.account = account;
    }

    private void openInitGamePanel() {
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                pnlCanvas.removeAll();
                pnlCanvas.add(initGamePanel, BorderLayout.CENTER);
                pnlCanvas.revalidate();
                pnlCanvas.repaint();
            }
        });

    }

    private void listenToServer() {
        new Thread(new Runnable() {

            @Override
            public void run() {
                Client client = clientMainFrame.getClient();
                while (!dead) {
                    try {
                        int cmd = -1;
                        try{
                            cmd = client.readInt();
                        } catch(java.io.EOFException e){
                            processLogOut();
                        }
                        if (cmd == Cmd.BROA_MSG) {
                            String msg = client.readMessage();
                            appendChatDialog(msg);
                        } else if (cmd == Cmd.BROA_MAP) {
                            receivedMap = (GameMap) client.readObject();
                            System.out.println(receivedMap);
//                            canvasPanel.updateScreen(receivedMap);
                            processReceivedMap(receivedMap);
                        } else if (cmd == Cmd.BROA_MAP_NO) {
                            GameMap map = new GameMap(client.readInt(), client.readInt());
                            map.setNodeSize(client.readInt());
                            map.setPlayer1Element(client.readInt());
                            for (int i = 0; i < map.getXSize(); i++) {
                                for (int j = 0; j < map.getYSize(); j++) {
                                    map.set(i, j, client.readInt());
                                }
                            }
                            receivedMap = map;
                            processReceivedMap(map);
                        } else if (cmd == Cmd.BROA_TITLE) {
                            String msg = client.readMessage();
                            updateLblMsgTitle(msg);
                        } else if (cmd == Cmd.UPDATE_NEW_ROOM) {
                            Room room = (Room) client.readObject();
                            initGamePanel.addNewRoom(room);
                        } else if (cmd == Cmd.UPDATE_STATUS_ROOM) {
                            Room room = (Room) client.readObject();
                            initGamePanel.updateRoomStatus(room.getName(), room.getStatus());
                        } else if (cmd == Cmd.ALL_ROOMS) {
                            List<Room> rooms = (List<Room>) client.readObject();
                            initGamePanel.setRooms(rooms);
                        } else if (cmd == Cmd.BOOL_NEW_ROOM) {
                            initGamePanel.processResultRequestNewRoom(client.readBoolean());
                        } else if (cmd == Cmd.BOOL_FIGHT_ROOM) {
                            processResultRequestFightRoom(client.readBoolean());
                        } else if (cmd == Cmd.BOOL_FINISHED) {
                            processResultIsFinished(client.readBoolean());
                        } else if (cmd == Cmd.BOOL_OBSERVE_ROOM) {
                            processResultRequestObserveRoom(client.readBoolean());
                        } else if (cmd == Cmd.BROA_USER) {
                            int count = client.readInt();
                            List<AccountItem> accountItems = new ArrayList<>();
                            for (int i = 0; i < count; i++) {
                                accountItems.add((AccountItem) client.readObject());
                            }
                            updateLstUsers(accountItems.toArray(new AccountItem[0]));

                        } else if (cmd == Cmd.REMOVE_ROOM) {
                            initGamePanel.removeRoom(client.readMessage());
                        } else if (cmd == Cmd.BOOL_LOG_OUT) {
                            processLogOut();
                        } else if (cmd == Cmd.KICK) {
                            outOfRoom();
                        }
                    } catch (IOException ex) {
                        Logger.getLogger(DashBoardPanel.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(DashBoardPanel.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }).start();
    }

    private void processLogOut() {
        try {
            clientMainFrame.getClient().closeConnection();
            System.exit(0);
        } catch (Exception ex) {
            Logger.getLogger(DashBoardPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void processResultIsFinished(boolean bool) {
        canvasPanel.setIsFinished(bool);
        if (bool) {
            account.addUpMatchsWin();
        }
    }

    private void appendChatDialog(final String msg) {
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                txtChatDialog.setText(prefix + content.append(msg) + postfix);
            }
        });
    }

    private void processReceivedMap(GameMap map) {
        if (this.canvasPanel != null) {
            this.canvasPanel.updateScreen(map);
        }
    }

    private void processResultRequestFightRoom(boolean bool) {
        if (bool && receivedMap != null) {
            this.openCanvasPanel(receivedMap, receivedMap.getNodeSize(), receivedMap.getPlayer1Element(), true);
        } else {
            JOptionPane.showMessageDialog(this, "Your request is fail!",
                    "Error!", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void processResultRequestObserveRoom(boolean bool) {
        if (bool && receivedMap != null) {
            this.openCanvasPanel(receivedMap, receivedMap.getNodeSize(), receivedMap.getPlayer1Element(), false);
        } else {
            JOptionPane.showMessageDialog(this, "Your request is fail!",
                    "Error!", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void loadRooms() {
        Client client = clientMainFrame.getClient();
        try {
            client.sendInt(Cmd.ALL_ROOMS);
        } catch (IOException ex) {
            Logger.getLogger(DashBoardPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public Client getClient() {
        return this.clientMainFrame.getClient();
    }

    public void openCanvasPanel(GameMap map, int nodeSize, int player1Element, boolean isPlayer) {
        canvasPanel = new CanvasPanel(map, nodeSize, player1Element, this);
        canvasPanel.setIsPlayer(isPlayer);
        if (isPlayer) {
            account.addUpMatchsTaken();
        }
        this.pnlCanvas.removeAll();
        this.pnlCanvas.add(canvasPanel, BorderLayout.CENTER);
        this.pnlCanvas.revalidate();
        this.pnlCanvas.repaint();
        this.setTitle(selectedRoomName);
        this.changeState(ON_GAME_SCREEN);
    }
    private final String prefix = "<html><body><p style='margin-top: 0'>";
    private final String postfix = "</p></body></html>";
    private StringBuilder content = new StringBuilder();
    private int state;
    private static final int ROOM_SCREEN = 1;
    private static final int ON_GAME_SCREEN = 2;

    public void changeState(final int state) {
        this.state = state;
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                switch (state) {
                    case ROOM_SCREEN:
                        btnOut.setEnabled(false);
                        btnSend.setEnabled(false);
                        btnEmotion.setEnabled(false);
                        updateLstUsers(new AccountItem[0]);
                        txtChatDialog.setText("");
                        content = new StringBuilder();
                        isHost = false;
                        canvasPanel = null;
                        lblMsgTitle.setText("");
                        break;
                    case ON_GAME_SCREEN:
                        btnOut.setEnabled(true);
                        btnSend.setEnabled(true);
                        btnEmotion.setEnabled(true);
                }
            }
        });
    }

    public void updateLblMsgTitle(final String msg) {
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                lblMsgTitle.setText(msg);
            }
        });
    }

    private void submitChatText() {
        String text = txtChatInput.getText().trim();
        Client client = getClient();
        try {
            client.sendInt(Cmd.SEND_MSG);
            client.sendMessage(text);
            txtChatInput.setText("");
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error while loading new room! Can't get connection stream!",
                    "Connection error!", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void appendImgToChatInput(ImageIcon img, String htmlImagePath) {
        StyledDocument doc = (StyledDocument) txtChatInput.getDocument();
        Style style = doc.addStyle("italic", null);
        StyleConstants.setIcon(style, img);
        try {
            doc.insertString(doc.getLength(), htmlImagePath, style);
        } catch (BadLocationException ex) {
            Logger.getLogger(DashBoardPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.txtChatInput.requestFocus();
    }

    private void bindEnterEventToChatInput() {
        int condition = JComponent.WHEN_FOCUSED;
        InputMap iMap = txtChatInput.getInputMap(condition);
        ActionMap aMap = txtChatInput.getActionMap();

        String enter = "enter";
        iMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), enter);
        aMap.put(enter, new AbstractAction() {

            @Override
            public void actionPerformed(ActionEvent arg0) {
                submitChatText();
            }
        });
    }

    public void setRoomName(String roomName) {
        this.selectedRoomName = roomName;
    }

    public void setTitle(String roomName) {
        String gameName = "Bamboo Caro";
        String userName = account.getUsername();
        String roomMsg = roomName == null ? "" : (" - @Room: " + roomName);
        this.clientMainFrame.setTitle(gameName + " - " + userName + roomMsg);
    }

    private void updateLstUsers(final AccountItem[] accountItem) {
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                lstUsers.setListData(accountItem);
                lstUsers.revalidate();
//                for (AccountItem acc : accountItem) {
//                    System.out.println(acc.getAccount().getUsername());
//                }
            }
        });
    }

    public void setIsHost(boolean isHost) {
        this.isHost = isHost;
    }

    private void outOfRoom() {
        Client client = this.clientMainFrame.getClient();
        try {
            client.sendInt(Cmd.OUT_ROOM);
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        this.openInitGamePanel();
        this.changeState(ROOM_SCREEN);
    }

    private void playerOutOfRoom() {
        Client client = this.clientMainFrame.getClient();
        try {
            client.sendInt(Cmd.PLAYER_OUT_ROOM);
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        this.openInitGamePanel();
        this.changeState(ROOM_SCREEN);
    }

    public void shutdownRequest() {
        Client client = this.clientMainFrame.getClient();
        if (canvasPanel != null) {
            if (!canvasPanel.isFinished() && canvasPanel.isPlayer()) {
                playerOutOfRoom();
            } else {
                outOfRoom();
            }
        }
        try {
            client.sendInt(Cmd.LOG_OUT);
            Thread.sleep(500);
        } catch (InterruptedException ex) {
            Logger.getLogger(DashBoardPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        
    }

    class PreWrapHTMLEditorKit extends HTMLEditorKit {

        @Override
        public ViewFactory getViewFactory() {
            return new HTMLFactory() {

                public View create(Element e) {
                    View v = super.create(e);
                    if (v instanceof InlineView) {
                        return new InlineView(e) {

                            public int getBreakWeight(int axis, float pos, float len) {
                                return super.getBreakWeight(axis, pos, len - 100);
                            }
                        };
                    }
                    return v;
                }
            };
        }
    }
}
